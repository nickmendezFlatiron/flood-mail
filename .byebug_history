exit
exiteexitexit
continue
exit
params[:recipient_id]
alert
exit
recipient
exit
recipient
exit
recipient[0].user_id
recipient[0]
recipient
exit
threaded.filter {|t| t.user_id !== current_user.id
threaded.filter {|t| t.user_id != current_user.id}
threaded.filter {|t| t.user_id !== current_user.id}
threaded
threaded = UserEmailThread.where(:email_thread_id => thread_id)
UserEmailThread.where(:email_thread_id => thread_id)
UserEmailThread.find(thread_id)
thread_id
recipient
c
exitexi
UserEmailThreadrreciprecipient
continueexitexitexit
current_user
cookies.encryptedcookie!!!exit
c
current_user.id
params
exit
params
exit
params
exit
params
exit
Message.all.find_by(email_thread_id: 1)
Message.all.find_by(email_thread_id: 2)
Message.all.find_by(email_thread_id: 3)
Message.all.find_by(email_thread_id: 4)
Message.all.find_by(email_thread_id: 1)
Message.all
EmailThread.all
current_user.email_threads
user.email_threads
current_user.email_threads.each {|e| e.destroy}
current_user.email_threads
exit
res
c
res
c
res.destroy_all
res
exit
del
exit
self.object.messages.where(body: nil)
self
self.object.messages.where(id: nil)
self.object
exit
c
exit
self.object.messages.last.body.truncate(33)
self.object.messages.last.body.tru
exit
self.object.messages.last.body.truncate(33)
self.object.messages.last.body
self.object.messages.last
self.object.messages
self.object
self.object.last
exit
params[:user_id]
params[:user.id]
current_user.id
current_user
exit
thread.id
exit
params
exit
current_user.id == params[:id].to_i
current_user.id == params[:id]
current_user.id
params[:id]
params[:id}
params
exit
self.object.messages.last
self.object.messages
self.object
exit
c
!!!
c
self.object.user_id
self
exit
!!!
exit
user.email_threads
emails
